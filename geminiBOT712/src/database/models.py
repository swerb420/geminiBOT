# src/database/models.py
# Defines the SQLAlchemy models for the database.

from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, JSON
from sqlalchemy.ext.declardeclarative import declarative_base
from sqlalchemy.orm import sessionmaker
from config.settings import DATABASE_URL
import datetime

Base = declarative_base()

class Signal(Base):
    """
    Represents a trading signal generated by the system.
    """
    __tablename__ = 'signals'
    id = Column(Integer, primary_key=True)
    symbol = Column(String, nullable=False, index=True)
    direction = Column(String, nullable=False) # 'BULLISH' or 'BEARISH'
    confidence_score = Column(Float, nullable=False)
    source_indicators = Column(JSON) # List of indicators that triggered the signal
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)
    status = Column(String, default='pending') # 'pending', 'executed', 'expired'

class Trade(Base):
    """
    Represents an executed trade.
    """
    __tablename__ = 'trades'
    id = Column(Integer, primary_key=True)
    signal_id = Column(Integer, index=True)
    symbol = Column(String, nullable=False, index=True)
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float)
    stop_loss = Column(Float)
    take_profit = Column(Float)
    position_size = Column(Float, nullable=False)
    pnl = Column(Float)
    entry_timestamp = Column(DateTime, default=datetime.datetime.utcnow)
    exit_timestamp = Column(DateTime)
    status = Column(String, default='open') # 'open', 'closed'

# --- Database Connection ---
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def init_db():
    """
    Initializes the database by creating all tables.
    """
    Base.metadata.create_all(bind=engine)

if __name__ == '__main__':
    # This allows you to create the tables by running this file directly
    print("Initializing database...")
    init_db()
    print("Database initialized.")

